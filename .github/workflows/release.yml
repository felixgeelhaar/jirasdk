name: Release

on:
  push:
    tags:
      - 'v*.*.*'

permissions:
  contents: write
  packages: write

jobs:
  # Verify tag is on main branch
  verify:
    name: Verify Tag on Main Branch
    runs-on: ubuntu-latest
    outputs:
      on_main: ${{ steps.check.outputs.on_main }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Check if tag is on main branch
      id: check
      run: |
        # Get the commit SHA that the tag points to
        TAG_COMMIT=$(git rev-list -n 1 ${{ github.ref }})

        # Check if this commit is on the main branch
        if git merge-base --is-ancestor $TAG_COMMIT origin/main; then
          echo "✅ Tag is on main branch"
          echo "on_main=true" >> $GITHUB_OUTPUT
        else
          echo "❌ Tag is not on main branch"
          echo "⚠️  Releases can only be created from main branch"
          echo "on_main=false" >> $GITHUB_OUTPUT
          exit 1
        fi

  # Run tests before releasing
  test:
    name: Test Before Release
    runs-on: ubuntu-latest
    needs: verify
    if: needs.verify.outputs.on_main == 'true'
    strategy:
      matrix:
        go-version: ['1.21', '1.22', '1.23']

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ matrix.go-version }}
        cache: true

    - name: Download dependencies
      run: go mod download

    - name: Verify dependencies
      run: go mod verify

    - name: Run tests
      run: go test -v -race -coverprofile=coverage.txt -covermode=atomic ./...

    - name: Run go vet
      run: go vet ./...

  # Create GitHub Release
  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [verify, test]
    if: needs.verify.outputs.on_main == 'true'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23'
        cache: true

    - name: Get version from tag
      id: get_version
      run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

    - name: Extract changelog for this version
      id: changelog
      run: |
        VERSION=${{ steps.get_version.outputs.VERSION }}
        # Extract changelog section for this version
        if [ -f CHANGELOG.md ]; then
          CHANGELOG=$(awk "/^## \[${VERSION}\]/{flag=1;next}/^## \[/{flag=0}flag" CHANGELOG.md)
          if [ -z "$CHANGELOG" ]; then
            CHANGELOG="See [CHANGELOG.md](https://github.com/${{ github.repository }}/blob/main/CHANGELOG.md) for details."
          fi
        else
          CHANGELOG="Release $VERSION"
        fi
        # Write to file to handle multiline
        echo "$CHANGELOG" > /tmp/changelog.txt

    # Note: jirasdk is a library, not an application, so we don't build binaries
    # Users will install it via: go get github.com/felixgeelhaar/jirasdk@vX.Y.Z

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        body_path: /tmp/changelog.txt
        draft: false
        prerelease: ${{ contains(steps.get_version.outputs.VERSION, '-rc') || contains(steps.get_version.outputs.VERSION, '-beta') || contains(steps.get_version.outputs.VERSION, '-alpha') }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Announce release
      run: |
        echo "🎉 Release ${{ steps.get_version.outputs.VERSION }} has been published!"
        echo "📦 Artifacts are available at: https://github.com/${{ github.repository }}/releases/tag/${{ steps.get_version.outputs.VERSION }}"
        echo "📚 Documentation: https://pkg.go.dev/github.com/${{ github.repository }}@${{ steps.get_version.outputs.VERSION }}"

  # Trigger pkg.go.dev documentation update
  pkgsite:
    name: Update pkg.go.dev
    runs-on: ubuntu-latest
    needs: [verify, release]
    if: needs.verify.outputs.on_main == 'true'

    steps:
    - name: Trigger pkg.go.dev update
      run: |
        VERSION=${GITHUB_REF#refs/tags/}
        MODULE="github.com/${{ github.repository }}"

        echo "🔄 Triggering pkg.go.dev update for ${MODULE}@${VERSION}..."

        # Method 1: Request module info from Go proxy (triggers indexing)
        echo "📡 Requesting from Go proxy..."
        curl -sSf "https://proxy.golang.org/${MODULE}/@v/${VERSION}.info" || echo "⚠️  Proxy request failed (may already be cached)"

        # Method 2: Direct fetch request to pkg.go.dev
        echo "📡 Requesting pkg.go.dev fetch..."
        curl -sSf "https://pkg.go.dev/fetch/${MODULE}@${VERSION}" || echo "⚠️  Direct fetch request queued"

        # Method 3: Request the module list (alternative trigger)
        echo "📡 Requesting module version list..."
        curl -sSf "https://proxy.golang.org/${MODULE}/@v/list" > /dev/null || true

        echo ""
        echo "✅ Update requests sent to pkg.go.dev"
        echo "📚 Documentation will be available shortly at:"
        echo "   https://pkg.go.dev/${MODULE}@${VERSION}"
        echo ""
        echo "💡 Note: It may take 5-10 minutes for the documentation to appear."
        echo "   You can check the status at: https://pkg.go.dev/${MODULE}?tab=versions"

  # Optional: Post release announcement
  announce:
    name: Post Release Announcement
    runs-on: ubuntu-latest
    needs: [verify, release]
    if: needs.verify.outputs.on_main == 'true' && !contains(github.ref, '-rc') && !contains(github.ref, '-beta') && !contains(github.ref, '-alpha')

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Create announcement
      run: |
        VERSION=${GITHUB_REF#refs/tags/}
        cat << EOF > announcement.md
        ## 🎉 jirasdk ${VERSION} Released!

        We're excited to announce the release of jirasdk ${VERSION}!

        ### Installation
        \`\`\`bash
        go get github.com/${{ github.repository }}@${VERSION}
        \`\`\`

        ### Documentation
        📚 [pkg.go.dev](https://pkg.go.dev/github.com/${{ github.repository }}@${VERSION})

        ### Release Notes
        See the [full release notes](https://github.com/${{ github.repository }}/releases/tag/${VERSION})

        ### What's New
        Check out [CHANGELOG.md](https://github.com/${{ github.repository }}/blob/main/CHANGELOG.md) for detailed changes.
        EOF

        cat announcement.md
        echo "✅ Announcement prepared for version ${VERSION}"

    # Uncomment to create a GitHub Discussion announcement
    # - name: Create Discussion
    #   uses: abirismyname/create-discussion@v1
    #   with:
    #     title: "Release ${{ steps.get_version.outputs.VERSION }}"
    #     body-path: announcement.md
    #     repository-id: ${{ secrets.REPOSITORY_ID }}
    #     category-id: ${{ secrets.ANNOUNCEMENTS_CATEGORY_ID }}
    #   env:
    #     GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
